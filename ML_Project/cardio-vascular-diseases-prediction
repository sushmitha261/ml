{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'C:\\\\Users\\\\acer\\\\ML_Project'"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.getcwd()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "os.chdir(\"E:\\SUSHMITHA\\Dataframes_csvFiles\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "df=pd.read_csv(\"cardiovascular_diseases.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>height</th>\n",
       "      <th>weight</th>\n",
       "      <th>ap_hi</th>\n",
       "      <th>ap_lo</th>\n",
       "      <th>cholesterol</th>\n",
       "      <th>gluc</th>\n",
       "      <th>smoke</th>\n",
       "      <th>alco</th>\n",
       "      <th>active</th>\n",
       "      <th>cardio</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>18393</td>\n",
       "      <td>2</td>\n",
       "      <td>168</td>\n",
       "      <td>62.0</td>\n",
       "      <td>110</td>\n",
       "      <td>80</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>20228</td>\n",
       "      <td>1</td>\n",
       "      <td>156</td>\n",
       "      <td>85.0</td>\n",
       "      <td>140</td>\n",
       "      <td>90</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>18857</td>\n",
       "      <td>1</td>\n",
       "      <td>165</td>\n",
       "      <td>64.0</td>\n",
       "      <td>130</td>\n",
       "      <td>70</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>17623</td>\n",
       "      <td>2</td>\n",
       "      <td>169</td>\n",
       "      <td>82.0</td>\n",
       "      <td>150</td>\n",
       "      <td>100</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>17474</td>\n",
       "      <td>1</td>\n",
       "      <td>156</td>\n",
       "      <td>56.0</td>\n",
       "      <td>100</td>\n",
       "      <td>60</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id    age  gender  height  weight  ap_hi  ap_lo  cholesterol   gluc  smoke  \\\n",
       "0   0  18393       2     168    62.0    110     80            1      1      0   \n",
       "1   1  20228       1     156    85.0    140     90            3      1      0   \n",
       "2   2  18857       1     165    64.0    130     70            3      1      0   \n",
       "3   3  17623       2     169    82.0    150    100            1      1      0   \n",
       "4   4  17474       1     156    56.0    100     60            1      1      0   \n",
       "\n",
       "   alco  active  cardio  \n",
       "0     0       1       0  \n",
       "1     0       1       1  \n",
       "2     0       0       1  \n",
       "3     0       1       1  \n",
       "4     0       0       0  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "!!! here , age is in days not years\n",
    "ap_hi is systolic blood pressure\n",
    "ap_lo\tis diastolic blood pressure\n",
    "gluc is the persons glucose level"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(69999, 13)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "69999"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id             0\n",
       " age           0\n",
       "gender         0\n",
       "height         0\n",
       "weight         0\n",
       "ap_hi          0\n",
       "ap_lo          0\n",
       "cholesterol    0\n",
       " gluc          0\n",
       "smoke          0\n",
       "alco           0\n",
       "active         0\n",
       "cardio         0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().values.any()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id             0\n",
       " age           0\n",
       "gender         0\n",
       "height         0\n",
       "weight         0\n",
       "ap_hi          0\n",
       "ap_lo          0\n",
       "cholesterol    0\n",
       " gluc          0\n",
       "smoke          0\n",
       "alco           0\n",
       "active         0\n",
       "cardio         0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['id', ' age', 'gender', 'height', 'weight', 'ap_hi', 'ap_lo',\n",
       "       'cholesterol', ' gluc', 'smoke', 'alco', 'active', 'cardio'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['id',\n",
       " ' age',\n",
       " 'gender',\n",
       " 'height',\n",
       " 'weight',\n",
       " 'ap_hi',\n",
       " 'ap_lo',\n",
       " 'cholesterol',\n",
       " ' gluc',\n",
       " 'smoke',\n",
       " 'alco',\n",
       " 'active',\n",
       " 'cardio']"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns.tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id               int64\n",
       " age             int64\n",
       "gender           int64\n",
       "height           int64\n",
       "weight         float64\n",
       "ap_hi            int64\n",
       "ap_lo            int64\n",
       "cholesterol      int64\n",
       " gluc            int64\n",
       "smoke            int64\n",
       "alco             int64\n",
       "active           int64\n",
       "cardio           int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>height</th>\n",
       "      <th>weight</th>\n",
       "      <th>ap_hi</th>\n",
       "      <th>ap_lo</th>\n",
       "      <th>cholesterol</th>\n",
       "      <th>gluc</th>\n",
       "      <th>smoke</th>\n",
       "      <th>alco</th>\n",
       "      <th>active</th>\n",
       "      <th>cardio</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>69999.000000</td>\n",
       "      <td>69999.000000</td>\n",
       "      <td>69999.000000</td>\n",
       "      <td>69999.000000</td>\n",
       "      <td>69999.000000</td>\n",
       "      <td>69999.000000</td>\n",
       "      <td>69999.000000</td>\n",
       "      <td>69999.000000</td>\n",
       "      <td>69999.000000</td>\n",
       "      <td>69999.000000</td>\n",
       "      <td>69999.000000</td>\n",
       "      <td>69999.000000</td>\n",
       "      <td>69999.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>49971.705224</td>\n",
       "      <td>19468.850512</td>\n",
       "      <td>1.349576</td>\n",
       "      <td>164.359148</td>\n",
       "      <td>74.205722</td>\n",
       "      <td>128.817412</td>\n",
       "      <td>96.630652</td>\n",
       "      <td>1.366862</td>\n",
       "      <td>1.226460</td>\n",
       "      <td>0.088130</td>\n",
       "      <td>0.053772</td>\n",
       "      <td>0.803726</td>\n",
       "      <td>0.499707</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>28850.888785</td>\n",
       "      <td>2467.265969</td>\n",
       "      <td>0.476840</td>\n",
       "      <td>8.210157</td>\n",
       "      <td>14.395857</td>\n",
       "      <td>154.012516</td>\n",
       "      <td>188.473866</td>\n",
       "      <td>0.680251</td>\n",
       "      <td>0.572274</td>\n",
       "      <td>0.283486</td>\n",
       "      <td>0.225569</td>\n",
       "      <td>0.397181</td>\n",
       "      <td>0.500003</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>10798.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>55.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>-150.000000</td>\n",
       "      <td>-70.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>25006.500000</td>\n",
       "      <td>17664.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>159.000000</td>\n",
       "      <td>65.000000</td>\n",
       "      <td>120.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>50001.000000</td>\n",
       "      <td>19703.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>165.000000</td>\n",
       "      <td>72.000000</td>\n",
       "      <td>120.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>74887.500000</td>\n",
       "      <td>21327.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>170.000000</td>\n",
       "      <td>82.000000</td>\n",
       "      <td>140.000000</td>\n",
       "      <td>90.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>99998.000000</td>\n",
       "      <td>23713.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>250.000000</td>\n",
       "      <td>200.000000</td>\n",
       "      <td>16020.000000</td>\n",
       "      <td>11000.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 id           age        gender        height        weight  \\\n",
       "count  69999.000000  69999.000000  69999.000000  69999.000000  69999.000000   \n",
       "mean   49971.705224  19468.850512      1.349576    164.359148     74.205722   \n",
       "std    28850.888785   2467.265969      0.476840      8.210157     14.395857   \n",
       "min        0.000000  10798.000000      1.000000     55.000000     10.000000   \n",
       "25%    25006.500000  17664.000000      1.000000    159.000000     65.000000   \n",
       "50%    50001.000000  19703.000000      1.000000    165.000000     72.000000   \n",
       "75%    74887.500000  21327.000000      2.000000    170.000000     82.000000   \n",
       "max    99998.000000  23713.000000      2.000000    250.000000    200.000000   \n",
       "\n",
       "              ap_hi         ap_lo   cholesterol          gluc         smoke  \\\n",
       "count  69999.000000  69999.000000  69999.000000  69999.000000  69999.000000   \n",
       "mean     128.817412     96.630652      1.366862      1.226460      0.088130   \n",
       "std      154.012516    188.473866      0.680251      0.572274      0.283486   \n",
       "min     -150.000000    -70.000000      1.000000      1.000000      0.000000   \n",
       "25%      120.000000     80.000000      1.000000      1.000000      0.000000   \n",
       "50%      120.000000     80.000000      1.000000      1.000000      0.000000   \n",
       "75%      140.000000     90.000000      2.000000      1.000000      0.000000   \n",
       "max    16020.000000  11000.000000      3.000000      3.000000      1.000000   \n",
       "\n",
       "               alco        active        cardio  \n",
       "count  69999.000000  69999.000000  69999.000000  \n",
       "mean       0.053772      0.803726      0.499707  \n",
       "std        0.225569      0.397181      0.500003  \n",
       "min        0.000000      0.000000      0.000000  \n",
       "25%        0.000000      1.000000      0.000000  \n",
       "50%        0.000000      1.000000      0.000000  \n",
       "75%        0.000000      1.000000      1.000000  \n",
       "max        1.000000      1.000000      1.000000  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    35020\n",
       "1    34979\n",
       "Name: cardio, dtype: int64"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#get a count of no of patients with cadiovascular diseases\n",
    "df['cardio'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "0...no diseases\n",
    "1....diseases\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0xa2d9ab0>"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0xa321390>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#visualize the count\n",
    "sns.countplot(df['cardio'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "#look at number of people with cardiovascular diseases that exceed the number of people without the cardiovascular diseases\n",
    "#reate a years clumn\n",
    "df['years']=(df[' age']/365)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0        50.391781\n",
       "1        55.419178\n",
       "2        51.663014\n",
       "3        48.282192\n",
       "4        47.873973\n",
       "5        60.038356\n",
       "6        60.583562\n",
       "7        61.873973\n",
       "8        48.405479\n",
       "9        54.339726\n",
       "10       61.726027\n",
       "11       51.547945\n",
       "12       40.523288\n",
       "13       54.271233\n",
       "14       39.813699\n",
       "15       45.978082\n",
       "16       58.345205\n",
       "17       45.882192\n",
       "18       47.895890\n",
       "19       59.602740\n",
       "20       54.186301\n",
       "21       58.665753\n",
       "22       63.139726\n",
       "23       64.043836\n",
       "24       45.501370\n",
       "25       39.597260\n",
       "26       53.586301\n",
       "27       49.547945\n",
       "28       39.928767\n",
       "29       57.690411\n",
       "           ...    \n",
       "69969    56.243836\n",
       "69970    61.841096\n",
       "69971    55.167123\n",
       "69972    46.753425\n",
       "69973    60.663014\n",
       "69974    49.934247\n",
       "69975    58.257534\n",
       "69976    59.449315\n",
       "69977    46.145205\n",
       "69978    51.506849\n",
       "69979    61.432877\n",
       "69980    48.567123\n",
       "69981    47.945205\n",
       "69982    51.893151\n",
       "69983    53.841096\n",
       "69984    49.112329\n",
       "69985    49.846575\n",
       "69986    49.857534\n",
       "69987    51.649315\n",
       "69988    60.213699\n",
       "69989    57.569863\n",
       "69990    41.353425\n",
       "69991    56.463014\n",
       "69992    51.484932\n",
       "69993    53.969863\n",
       "69994    57.736986\n",
       "69995    52.712329\n",
       "69996    61.920548\n",
       "69997    52.235616\n",
       "69998    61.454795\n",
       "Name: years, Length: 69999, dtype: float64"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['years']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['years']=(df[' age']/365).round(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0        50.0\n",
       "1        55.0\n",
       "2        52.0\n",
       "3        48.0\n",
       "4        48.0\n",
       "5        60.0\n",
       "6        61.0\n",
       "7        62.0\n",
       "8        48.0\n",
       "9        54.0\n",
       "10       62.0\n",
       "11       52.0\n",
       "12       41.0\n",
       "13       54.0\n",
       "14       40.0\n",
       "15       46.0\n",
       "16       58.0\n",
       "17       46.0\n",
       "18       48.0\n",
       "19       60.0\n",
       "20       54.0\n",
       "21       59.0\n",
       "22       63.0\n",
       "23       64.0\n",
       "24       46.0\n",
       "25       40.0\n",
       "26       54.0\n",
       "27       50.0\n",
       "28       40.0\n",
       "29       58.0\n",
       "         ... \n",
       "69969    56.0\n",
       "69970    62.0\n",
       "69971    55.0\n",
       "69972    47.0\n",
       "69973    61.0\n",
       "69974    50.0\n",
       "69975    58.0\n",
       "69976    59.0\n",
       "69977    46.0\n",
       "69978    52.0\n",
       "69979    61.0\n",
       "69980    49.0\n",
       "69981    48.0\n",
       "69982    52.0\n",
       "69983    54.0\n",
       "69984    49.0\n",
       "69985    50.0\n",
       "69986    50.0\n",
       "69987    52.0\n",
       "69988    60.0\n",
       "69989    58.0\n",
       "69990    41.0\n",
       "69991    56.0\n",
       "69992    51.0\n",
       "69993    54.0\n",
       "69994    58.0\n",
       "69995    53.0\n",
       "69996    62.0\n",
       "69997    52.0\n",
       "69998    61.0\n",
       "Name: years, Length: 69999, dtype: float64"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['years']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dtype('float64')"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['years'].dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['years']=pd.to_numeric(df['years'],downcast=\"integer\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dtype('int8')"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['years'].dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0xa65ed90>"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7265870>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#visualize the data\n",
    "sns.countplot(x=\"years\" , hue=\"cardio\",data=df,palette=\"colorblind\",edgecolor=sns.color_palette('dark',n_colors=1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "before age 55 we observed that the number of persons with cardiovascular diseases are less than number of persons without cardiovascular diseases\n",
    "\n",
    "after age 55 we observed that the number of persons with cardiovascular diseases are more than number of persons without cardiovascular diseases"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>height</th>\n",
       "      <th>weight</th>\n",
       "      <th>ap_hi</th>\n",
       "      <th>ap_lo</th>\n",
       "      <th>cholesterol</th>\n",
       "      <th>gluc</th>\n",
       "      <th>smoke</th>\n",
       "      <th>alco</th>\n",
       "      <th>active</th>\n",
       "      <th>cardio</th>\n",
       "      <th>years</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>id</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.003446</td>\n",
       "      <td>0.003520</td>\n",
       "      <td>-0.003055</td>\n",
       "      <td>-0.001826</td>\n",
       "      <td>0.003357</td>\n",
       "      <td>-0.002527</td>\n",
       "      <td>0.006083</td>\n",
       "      <td>0.002477</td>\n",
       "      <td>-0.003692</td>\n",
       "      <td>0.001216</td>\n",
       "      <td>0.003743</td>\n",
       "      <td>0.003824</td>\n",
       "      <td>0.003041</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>age</th>\n",
       "      <td>0.003446</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.022806</td>\n",
       "      <td>-0.081520</td>\n",
       "      <td>0.053685</td>\n",
       "      <td>0.020765</td>\n",
       "      <td>0.017648</td>\n",
       "      <td>0.154419</td>\n",
       "      <td>0.098705</td>\n",
       "      <td>-0.047631</td>\n",
       "      <td>-0.029721</td>\n",
       "      <td>-0.009930</td>\n",
       "      <td>0.238167</td>\n",
       "      <td>0.999090</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>gender</th>\n",
       "      <td>0.003520</td>\n",
       "      <td>-0.022806</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.499044</td>\n",
       "      <td>0.155405</td>\n",
       "      <td>0.006005</td>\n",
       "      <td>0.015253</td>\n",
       "      <td>-0.035812</td>\n",
       "      <td>-0.020495</td>\n",
       "      <td>0.338133</td>\n",
       "      <td>0.170965</td>\n",
       "      <td>0.005871</td>\n",
       "      <td>0.008099</td>\n",
       "      <td>-0.023013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>height</th>\n",
       "      <td>-0.003055</td>\n",
       "      <td>-0.081520</td>\n",
       "      <td>0.499044</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.290970</td>\n",
       "      <td>0.005488</td>\n",
       "      <td>0.006151</td>\n",
       "      <td>-0.050236</td>\n",
       "      <td>-0.018591</td>\n",
       "      <td>0.187993</td>\n",
       "      <td>0.094421</td>\n",
       "      <td>-0.006574</td>\n",
       "      <td>-0.010811</td>\n",
       "      <td>-0.081461</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>weight</th>\n",
       "      <td>-0.001826</td>\n",
       "      <td>0.053685</td>\n",
       "      <td>0.155405</td>\n",
       "      <td>0.290970</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.030702</td>\n",
       "      <td>0.043710</td>\n",
       "      <td>0.141771</td>\n",
       "      <td>0.106857</td>\n",
       "      <td>0.067780</td>\n",
       "      <td>0.067112</td>\n",
       "      <td>-0.016866</td>\n",
       "      <td>0.181659</td>\n",
       "      <td>0.053662</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ap_hi</th>\n",
       "      <td>0.003357</td>\n",
       "      <td>0.020765</td>\n",
       "      <td>0.006005</td>\n",
       "      <td>0.005488</td>\n",
       "      <td>0.030702</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.016085</td>\n",
       "      <td>0.023779</td>\n",
       "      <td>0.011840</td>\n",
       "      <td>-0.000922</td>\n",
       "      <td>0.001408</td>\n",
       "      <td>-0.000033</td>\n",
       "      <td>0.054475</td>\n",
       "      <td>0.020794</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ap_lo</th>\n",
       "      <td>-0.002527</td>\n",
       "      <td>0.017648</td>\n",
       "      <td>0.015253</td>\n",
       "      <td>0.006151</td>\n",
       "      <td>0.043710</td>\n",
       "      <td>0.016085</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.024021</td>\n",
       "      <td>0.010805</td>\n",
       "      <td>0.005186</td>\n",
       "      <td>0.010601</td>\n",
       "      <td>0.004781</td>\n",
       "      <td>0.065718</td>\n",
       "      <td>0.017755</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cholesterol</th>\n",
       "      <td>0.006083</td>\n",
       "      <td>0.154419</td>\n",
       "      <td>-0.035812</td>\n",
       "      <td>-0.050236</td>\n",
       "      <td>0.141771</td>\n",
       "      <td>0.023779</td>\n",
       "      <td>0.024021</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.451586</td>\n",
       "      <td>0.010359</td>\n",
       "      <td>0.035764</td>\n",
       "      <td>0.009905</td>\n",
       "      <td>0.221164</td>\n",
       "      <td>0.154382</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>gluc</th>\n",
       "      <td>0.002477</td>\n",
       "      <td>0.098705</td>\n",
       "      <td>-0.020495</td>\n",
       "      <td>-0.018591</td>\n",
       "      <td>0.106857</td>\n",
       "      <td>0.011840</td>\n",
       "      <td>0.010805</td>\n",
       "      <td>0.451586</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.004758</td>\n",
       "      <td>0.011244</td>\n",
       "      <td>-0.006767</td>\n",
       "      <td>0.089302</td>\n",
       "      <td>0.098598</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>smoke</th>\n",
       "      <td>-0.003692</td>\n",
       "      <td>-0.047631</td>\n",
       "      <td>0.338133</td>\n",
       "      <td>0.187993</td>\n",
       "      <td>0.067780</td>\n",
       "      <td>-0.000922</td>\n",
       "      <td>0.005186</td>\n",
       "      <td>0.010359</td>\n",
       "      <td>-0.004758</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.340093</td>\n",
       "      <td>0.025860</td>\n",
       "      <td>-0.015490</td>\n",
       "      <td>-0.047883</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>alco</th>\n",
       "      <td>0.001216</td>\n",
       "      <td>-0.029721</td>\n",
       "      <td>0.170965</td>\n",
       "      <td>0.094421</td>\n",
       "      <td>0.067112</td>\n",
       "      <td>0.001408</td>\n",
       "      <td>0.010601</td>\n",
       "      <td>0.035764</td>\n",
       "      <td>0.011244</td>\n",
       "      <td>0.340093</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.025478</td>\n",
       "      <td>-0.007334</td>\n",
       "      <td>-0.029916</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>active</th>\n",
       "      <td>0.003743</td>\n",
       "      <td>-0.009930</td>\n",
       "      <td>0.005871</td>\n",
       "      <td>-0.006574</td>\n",
       "      <td>-0.016866</td>\n",
       "      <td>-0.000033</td>\n",
       "      <td>0.004781</td>\n",
       "      <td>0.009905</td>\n",
       "      <td>-0.006767</td>\n",
       "      <td>0.025860</td>\n",
       "      <td>0.025478</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.035647</td>\n",
       "      <td>-0.009822</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cardio</th>\n",
       "      <td>0.003824</td>\n",
       "      <td>0.238167</td>\n",
       "      <td>0.008099</td>\n",
       "      <td>-0.010811</td>\n",
       "      <td>0.181659</td>\n",
       "      <td>0.054475</td>\n",
       "      <td>0.065718</td>\n",
       "      <td>0.221164</td>\n",
       "      <td>0.089302</td>\n",
       "      <td>-0.015490</td>\n",
       "      <td>-0.007334</td>\n",
       "      <td>-0.035647</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.237757</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>years</th>\n",
       "      <td>0.003041</td>\n",
       "      <td>0.999090</td>\n",
       "      <td>-0.023013</td>\n",
       "      <td>-0.081461</td>\n",
       "      <td>0.053662</td>\n",
       "      <td>0.020794</td>\n",
       "      <td>0.017755</td>\n",
       "      <td>0.154382</td>\n",
       "      <td>0.098598</td>\n",
       "      <td>-0.047883</td>\n",
       "      <td>-0.029916</td>\n",
       "      <td>-0.009822</td>\n",
       "      <td>0.237757</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   id       age    gender    height    weight     ap_hi  \\\n",
       "id           1.000000  0.003446  0.003520 -0.003055 -0.001826  0.003357   \n",
       " age         0.003446  1.000000 -0.022806 -0.081520  0.053685  0.020765   \n",
       "gender       0.003520 -0.022806  1.000000  0.499044  0.155405  0.006005   \n",
       "height      -0.003055 -0.081520  0.499044  1.000000  0.290970  0.005488   \n",
       "weight      -0.001826  0.053685  0.155405  0.290970  1.000000  0.030702   \n",
       "ap_hi        0.003357  0.020765  0.006005  0.005488  0.030702  1.000000   \n",
       "ap_lo       -0.002527  0.017648  0.015253  0.006151  0.043710  0.016085   \n",
       "cholesterol  0.006083  0.154419 -0.035812 -0.050236  0.141771  0.023779   \n",
       " gluc        0.002477  0.098705 -0.020495 -0.018591  0.106857  0.011840   \n",
       "smoke       -0.003692 -0.047631  0.338133  0.187993  0.067780 -0.000922   \n",
       "alco         0.001216 -0.029721  0.170965  0.094421  0.067112  0.001408   \n",
       "active       0.003743 -0.009930  0.005871 -0.006574 -0.016866 -0.000033   \n",
       "cardio       0.003824  0.238167  0.008099 -0.010811  0.181659  0.054475   \n",
       "years        0.003041  0.999090 -0.023013 -0.081461  0.053662  0.020794   \n",
       "\n",
       "                ap_lo  cholesterol      gluc     smoke      alco    active  \\\n",
       "id          -0.002527     0.006083  0.002477 -0.003692  0.001216  0.003743   \n",
       " age         0.017648     0.154419  0.098705 -0.047631 -0.029721 -0.009930   \n",
       "gender       0.015253    -0.035812 -0.020495  0.338133  0.170965  0.005871   \n",
       "height       0.006151    -0.050236 -0.018591  0.187993  0.094421 -0.006574   \n",
       "weight       0.043710     0.141771  0.106857  0.067780  0.067112 -0.016866   \n",
       "ap_hi        0.016085     0.023779  0.011840 -0.000922  0.001408 -0.000033   \n",
       "ap_lo        1.000000     0.024021  0.010805  0.005186  0.010601  0.004781   \n",
       "cholesterol  0.024021     1.000000  0.451586  0.010359  0.035764  0.009905   \n",
       " gluc        0.010805     0.451586  1.000000 -0.004758  0.011244 -0.006767   \n",
       "smoke        0.005186     0.010359 -0.004758  1.000000  0.340093  0.025860   \n",
       "alco         0.010601     0.035764  0.011244  0.340093  1.000000  0.025478   \n",
       "active       0.004781     0.009905 -0.006767  0.025860  0.025478  1.000000   \n",
       "cardio       0.065718     0.221164  0.089302 -0.015490 -0.007334 -0.035647   \n",
       "years        0.017755     0.154382  0.098598 -0.047883 -0.029916 -0.009822   \n",
       "\n",
       "               cardio     years  \n",
       "id           0.003824  0.003041  \n",
       " age         0.238167  0.999090  \n",
       "gender       0.008099 -0.023013  \n",
       "height      -0.010811 -0.081461  \n",
       "weight       0.181659  0.053662  \n",
       "ap_hi        0.054475  0.020794  \n",
       "ap_lo        0.065718  0.017755  \n",
       "cholesterol  0.221164  0.154382  \n",
       " gluc        0.089302  0.098598  \n",
       "smoke       -0.015490 -0.047883  \n",
       "alco        -0.007334 -0.029916  \n",
       "active      -0.035647 -0.009822  \n",
       "cardio       1.000000  0.237757  \n",
       "years        0.237757  1.000000  "
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#get the corelation of columns\n",
    "df.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "#visualize the data\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0xb1bce70>"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0xb1f6f90>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(7,7))\n",
    "sns.heatmap(df.corr(),annot=True, fmt='.0%')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "here,cardio column(x-label) has  24% positive correlation with age and years,1% positive correlation with gender,18% positive correlation with weight,22% positive correlation with cholesterol"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "#prepeare data for ML model\n",
    "df=df.drop('years',axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "#remove id column becoz it is 0% correlated with cardio\n",
    "df=df.drop('id',axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "#splitting data into feature data and targeeet data\n",
    "X=df.iloc[:,:-1].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1.8393e+04, 2.0000e+00, 1.6800e+02, ..., 0.0000e+00, 0.0000e+00,\n",
       "        1.0000e+00],\n",
       "       [2.0228e+04, 1.0000e+00, 1.5600e+02, ..., 0.0000e+00, 0.0000e+00,\n",
       "        1.0000e+00],\n",
       "       [1.8857e+04, 1.0000e+00, 1.6500e+02, ..., 0.0000e+00, 0.0000e+00,\n",
       "        0.0000e+00],\n",
       "       ...,\n",
       "       [2.2601e+04, 1.0000e+00, 1.5800e+02, ..., 0.0000e+00, 0.0000e+00,\n",
       "        1.0000e+00],\n",
       "       [1.9066e+04, 2.0000e+00, 1.8300e+02, ..., 0.0000e+00, 1.0000e+00,\n",
       "        0.0000e+00],\n",
       "       [2.2431e+04, 1.0000e+00, 1.6300e+02, ..., 0.0000e+00, 0.0000e+00,\n",
       "        0.0000e+00]])"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "y=df.iloc[:,-1].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 1, ..., 1, 1, 1], dtype=int64)"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=23)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "#feature scaling\n",
    "#scale the values in the data to be between 0 nd 1\n",
    "from sklearn.preprocessing import StandardScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "sc=StandardScaler()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train=sc.fit_transform(X_train)\n",
    "X_test=sc.fit_transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "#use random forest classifier\n",
    "from sklearn.ensemble import RandomForestClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "forest=RandomForestClassifier(n_estimators=10,criterion='entropy',random_state=23)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(bootstrap=True, class_weight=None, criterion='entropy',\n",
       "            max_depth=None, max_features='auto', max_leaf_nodes=None,\n",
       "            min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "            min_samples_leaf=1, min_samples_split=2,\n",
       "            min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=1,\n",
       "            oob_score=False, random_state=23, verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(bootstrap=True, class_weight=None, criterion='entropy',\n",
       "            max_depth=None, max_features='auto', max_leaf_nodes=None,\n",
       "            min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "            min_samples_leaf=1, min_samples_split=2,\n",
       "            min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=1,\n",
       "            oob_score=False, random_state=23, verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "forest.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9802496473151306"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model=forest\n",
    "forest.score(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "#test the moel\n",
    "from sklearn.metrics import confusion_matrix\n",
    "cm=confusion_matrix(y_test,model.predict(X_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[5650, 1345],\n",
       "       [2797, 4208]], dtype=int64)"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "#true negative\n",
    "TN=cm[0][0]\n",
    "TP=cm[1][1]\n",
    "FN=cm[1][0]\n",
    "FP=cm[0][1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "model accuracy =0.7041428571428572\n"
     ]
    }
   ],
   "source": [
    "print(\"model accuracy ={}\".format((TP+TN)/(TP+TN+FN+FP)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "model accuracy=70%\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
